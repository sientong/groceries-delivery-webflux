name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: groceries_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and Test Backend
        working-directory: ./backend
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_R2DBC_URL: r2dbc:postgresql://localhost:5432/groceries_test
          SPRING_R2DBC_USERNAME: postgres
          SPRING_R2DBC_PASSWORD: postgres
          SPRING_REDIS_HOST: localhost
          SPRING_REDIS_PORT: 6379
        run: |
          mvn clean install
          mvn test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: backend/target/surefire-reports

#   security-scan:
#     name: Security Scan
#     runs-on: ubuntu-latest
#     needs: [backend-test]

#     steps:
#       - uses: actions/checkout@v3

#       - name: Run Snyk to check for vulnerabilities
#         uses: snyk/actions/maven@master
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           args: --severity-threshold=high

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/groceries-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/groceries-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/groceries-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/groceries-backend:buildcache,mode=max

      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/groceries-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/groceries-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/groceries-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/groceries-frontend:buildcache,mode=max

#   deploy:
#     name: Deploy to Production
#     runs-on: ubuntu-latest
#     needs: [build-and-push]
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#     environment: production

#     steps:
#       - uses: actions/checkout@v3

#       - name: Update Docker Compose configs
#         env:
#           DOCKER_IMAGE_TAG: ${{ github.sha }}
#         run: |
#           echo "Updating docker-compose.prod.yml with new image tags..."
#           sed -i "s|groceries-backend:latest|groceries-backend:${DOCKER_IMAGE_TAG}|g" docker-compose.prod.yml
#           sed -i "s|groceries-frontend:latest|groceries-frontend:${DOCKER_IMAGE_TAG}|g" docker-compose.prod.yml

#       - name: Deploy to Production Server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.PROD_HOST }}
#           username: ${{ secrets.PROD_USERNAME }}
#           key: ${{ secrets.PROD_SSH_KEY }}
#           script: |
#             cd /opt/groceries
#             docker-compose -f docker-compose.prod.yml pull
#             docker-compose -f docker-compose.prod.yml up -d
#             docker system prune -f
